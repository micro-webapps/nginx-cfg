#!/usr/bin/env python
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: Jan Kaluza <jkaluza at redhat dot com>
# Description: Converts webserver configuration from webconf-spec JSON
# format to native nginx configuration format.

from __future__ import print_function
from urlparse import urlparse
import sys
import json
import os
import uuid
import collections

def print_help():
    print("Usage:", sys.argv[0], "<config_file_or_directory> <output_directory>")

# Loads the config "c" and store it to internal configs storage "cfgs".
def load_config(cfgs, c):
    # The configs stored in Kubernetes/Openshift API-server can have their IDs.
    # We use the ID here as a name of the web application configured by the
    # config, so later when generating the nginx config, we can name it
    # according to web application configured by the config.
    if "id" in c:
        name = c["id"]
        name = name.replace("-","_")
    else:
        name = str(uuid.uuid1())

    # In case the ID is not unique and the config with this ID has been
    # already loaded, append UUID to it.
    if name in cfgs["webapps"]:
        name += str(uuid.uuid1())

    # For now we support also loading from "webconfig".
    # FIXME: This is not according to webconfig-spec. Micro-webapps confd.py has
    # to be fixed before removing this.
    if "webconfig" in c:
        cfgs["webapps"][name] = c["webconfig"]
    else:
        cfgs["webapps"][name] = c

    return cfgs

# Replaces %X% with value of X environment variable.
# Replaces %THIS_X% with value of app_name_X environment variable.
# FIXME: ^ Is this realy needed or beneficial?
def expand_variables(line, app_name):
    if line.startswith("%") and line.endswith("%"):
        env = line[1:-1]
        if env.startswith("THIS_"):
            env = env.replace("THIS_", app_name.upper() + "_")
        return os.getenv(env, "")

    ret = ""
    lst = line.split("%")
    for part in lst:
        env = part
        if env.startswith("THIS_"):
            env = env.replace("THIS_", app_name.upper() + "_")
        val = os.getenv(env, False)
        if val == False:
            ret += part + "%"
        else:
            ret = ret[:-1]
            ret += val
    return ret[:-1] # remove last %

# Returns two objects from "cfgs":
# - webapps_per_vhost - {vhost1:[app1_cfg, app2_cfg, ...], ...}
# - webapps_without_vhost - [app1_cfg, app2_cfg, ...]
def get_webapps_per_vhost(cfgs):
    webapps_per_vhost = {}
    webapps_without_vhost = []
    for app, app_cfg in cfgs["webapps"].items():
        # We would loss the app name, so store it under __name__ key.
        # FIXME: Maybe in the future we could create App class here.
        app_cfg["__name__"] = app
        if "virtualhost" in app_cfg:
            # virtualhost can contain variable, so at first try to expand it.
            # If it's empty after the expansion, append it to
            # webapp_without_vhost list.
            vhost = expand_variables(app_cfg["virtualhost"], app)
            if len(vhost) == 0:
                webapps_without_vhost.append(app_cfg)
            else:
                if not vhost in webapps_per_vhost:
                    webapps_per_vhost[vhost] = []
                webapps_per_vhost[vhost].append(app_cfg)
        else:
            webapps_without_vhost.append(app_cfg)
    
    return webapps_per_vhost, webapps_without_vhost

class NginxProxyGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "proxy"

    # Returns address of proxy in protocol://address:port format.
    # Returns None if the address cannot be obtained or is not set
    # in the proxy_cfg.
    def get_address(self, proxy_cfg):
        ret = ""

        if "url" in proxy_cfg["proxy"]:
            url = urlparse(proxy_cfg["proxy"]["url"])

            ret = expand_variables(url.scheme, self.p.app_name)
            if len(ret) == 0:
                ret = "http://"
            else:
                ret += "://"

            hostname = url.hostname
            port = url.port

            # We must not replace the name of balancer with hostname from env.
            if url.scheme == "balancer":
                ret += hostname
                if port:
                    ret += ":" + str(port)
                return ret
        else:
            return None

        # For Kubernetes/Openshift, we allow getting the address and port of
        # the backend from the APP_NAME_PORT environment variable.
        address_env = self.p.app_name.upper() + "_PORT"
        address = os.getenv(address_env, False)
        if address:
            url = urlparse(address)
            # If we are running in Kubernetes/Openshift, use the IP address,
            # because it's static per service. Otherwise use the hostname
            # (app_name) and port from _PORT.
            if os.getenv("KUBERNETES_SERVICE_PORT", False) != False:
                ret += url.netloc
            else:
                ret += self.p.app_name + ":" + str(url.port)
        else:
            # The APP_NAME_PORT variable is not set, so fallback to
            # proxy_hostname and proxy_port.
            ret += hostname
            if port:
                ret += ":" + str(port)

        return ret

    def write_proxypass(self, proxy_cfg):
        backend_address = self.get_address(proxy_cfg)
        if not backend_address:
            return

        parsed = urlparse(backend_address)
        backend_url = parsed.scheme + "://" + self.p.vhost_name

        # Get proxy_backend_alias or set it to "/" if not set.
        if "url" in proxy_cfg["proxy"]:
            url = urlparse(proxy_cfg["proxy"]["url"])
            proxy_backend_alias = url.path
        else:
            return
    
        if len(expand_variables(proxy_backend_alias, self.p.app_name)) != 0:
            proxy_backend_alias = expand_variables(proxy_backend_alias, self.p.app_name)
        else:
            proxy_backend_alias = "/"

        if proxy_backend_alias[-1] != "/":
            proxy_backend_alias += "/"

        backend_url += proxy_backend_alias
        backend_address += proxy_backend_alias

        # Get frontend URL or set it to "/" if not set.
        if "alias" in proxy_cfg["proxy"]:
            frontend_url = expand_variables(proxy_cfg["proxy"]["alias"], self.p.app_name)
            if len(frontend_url) == 0:
                frontend_url = "/"
        else:
            frontend_url = "/"

        if frontend_url[-1] != "/":
            frontend_url += "/"

        # In case this method is called outside of "location" scope. we
        # have to create the "location" here.
        added_location = False
        if not "location" in self.p.nested_sections:
            self.p.write("location {0} {{", frontend_url)
            added_location = True
            self.p.nested_sections.insert(0, "location")

        self.p.write("proxy_set_header HOST $host;")
        self.p.write("proxy_set_header X-Forwarded-Proto $scheme;")
        self.p.write("proxy_set_header X-Real-IP $remote_addr;")
        self.p.write("proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;")

        if backend_address.startswith("http"):
            self.p.write("proxy_pass {0};", backend_address)
            self.p.write("proxy_set_header Host $host;")
            self.p.write("proxy_redirect default;")
            netloc = "{0}://{1}{2}".format(parsed.scheme, parsed.hostname, proxy_backend_alias)
            self.p.write("proxy_redirect {0}   {1};", netloc, frontend_url)
            if netloc != backend_url:
                self.p.write("proxy_redirect {0}   {1};", backend_url, frontend_url)
        elif backend_address.startswith("fcgi://"):
            # TODO: Maybe we should check that the php file exists as is
            # done by following commented part of code, but the problem
            # is we would have to replace $document_root with the real
            # location of the php files.
            #self.p.write("fastcgi_split_path_info ^(.+?\.php)(/.*)$;")
            #self.p.write("if (!-f $document_root$fastcgi_script_name) {{")
            #self.p.write("    return 404;")
            #self.p.write("}}")
            # TODO: This should not be hard-coded.
            self.p.write("fastcgi_index index.php;")
            self.p.write("fastcgi_pass {0};", parsed.netloc)
            self.p.write("include fastcgi_params;")
        elif backend_address.startswith("balancer://"):
            # TODO: Support for more schemes than "http://".
            # We should take the scheme from the "balancers.members" section.
            # url = urlparse(backend_address)
            backend_address = backend_address.replace("balancer://", "http://")
            self.p.write("proxy_pass {0};", backend_address)

        if added_location:
            self.p.nested_sections.pop(0)
            self.p.write("}}")

    def write_sethandler(self, proxy_cfg):
        address = self.get_address(proxy_cfg)
        if address:
            self.p.write("SetHandler \"proxy:{0}\"", address)

    def handle(self, proxy_cfg):
        if not "proxy" in proxy_cfg:
            return True

        self.write_proxypass(proxy_cfg)
        return True

class NginxAllowGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "allow"

    def handle(self, cfg):
        if not "allow" in cfg:
            return True

        allow = cfg["allow"]
        if allow == "all":
            self.p.write("allow all;")
        elif allow == "local":
            self.p.write("allow 127.0.0.1;")
            self.p.write("allow ::1;")
        else:
            self.p.write("deny all;")
        return True

class NginxRedirectsGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "redirects"

    def handle(self, cfg):
        if not "redirects" in cfg:
            return True

        for frm, redirect in cfg["redirects"].items():
            # When the "from" part of redirection does not contain
            # the trailing slash, redirect from "/location" to "/location/" and
            # add the trailing slash to redired from "/location/" to real
            # "to" URL later.
            if frm[-1] != "/":
                self.p.write("location = {0} {{", frm)
                self.p.nested_sections.insert(0, "location")
                self.p.write("rewrite ^(.*[^/])$ $1/ permanent;")
                self.p.nested_sections.pop(0)
                self.p.write("}}")
                self.p.write("")
                frm += "/"

            self.p.write("location {0} {{", frm)
            self.p.nested_sections.insert(0, "location")
            self.p.write("return 301 {0};", redirect["to"])
            self.p.nested_sections.pop(0)
            self.p.write("}}")
        return True

class NginxBalancersGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "balancers"

    def write_balancer(self, name, cfg):
        if not "members" in cfg:
            return True
        if not "method" in cfg:
            cfg["method"] = "round-robin"

        self.p.write("upstream {0} {{", name)
        self.p.nested_sections.insert(0, "balancer")

        generate_route =  False
        stickysession = None
        if "persistence" in cfg and "method" in cfg["persistence"] and cfg["persistence"]["method"] != "none":
            if cfg["persistence"]["method"] == "generate_cookie":
                # Sticky is available only as part of commercial nginx version...
                # self.p.write("sticky cookie {0} path=/;", cfg["persistence"]["cookie_name"])
                # generate_route = True
                # .. so use "ip_hash" instead for now
                cfg["method"] = "ip_hash"
            if "cookie_name" in cfg["persistence"]:
                stickysession = cfg["persistence"]["cookie_name"]
            if "url_id" in cfg["persistence"]:
                stickysession += "|" + cfg["persistence"]["url_id"]

        i = 0
        for member in cfg["members"]:
            args = ""
            if "weight" in member:
                args += " weight=" + str(member["weight"])
            if generate_route:
                if len(sys.argv) == 4 and sys.argv[3] == "--debug":
                    args += " route=node" + str(i)
                    i += 1
                else:
                    args += " route=" + str(uuid.uuid1())

            url = urlparse(member["url"])
            self.p.write("server {0}{1};", url.netloc, args)

        if cfg["method"] == "least-connected":
            self.p.write("least_conn;")
        elif cfg["method"] == "ip_hash":
            self.p.write("ip_hash;")

        self.p.nested_sections.pop(0)
        self.p.write("}}")
        self.p.write("")

    def handle(self, cfg):
        if not "balancers" in cfg:
            return True

        for name, balancer in cfg["balancers"].items():
            self.write_balancer(name, balancer)

        return True

class NginxCertificateGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "certificate"

    def write_cert(self, cert, key = False):
        outdir = sys.argv[2]
        if cert.startswith("-----BEGIN CERTIFICATE"):
            filename = os.path.join(outdir, self.p.vhost_name + ".crt")
        elif cert.startswith("-----BEGIN RSA PRIVATE KEY"):
            filename = os.path.join(outdir, self.p.vhost_name + ".key")
        else:
            return cert

        out = open(filename, "w")
        out.write(cert.replace("\\n","\n"))
        out.write("\n")
        out.close()

        return filename


    def handle(self, cfg):
        if not "certificate" in cfg:
            return True

        cfg["certificate"] = self.write_cert(cfg["certificate"])

        self.p.write("ssl_certificate {0};", cfg["certificate"])
        if "certificate_key" in cfg:
            cfg["certificate_key"] = self.write_cert(cfg["certificate_key"])
            self.p.write("ssl_certificate_key {0};", cfg["certificate_key"])
        
        return True

class NginxMatchGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "match"

    def write_match(self, regex, cfg):
        # Match directive is basically regexp location ...
        self.p.write("location ~ {0} {{", regex)
        self.p.nested_sections.insert(0, "location")
        ret = self.p.run_directive_handlers(cfg)
        self.p.nested_sections.pop(0)
        self.p.write("}}")

        return ret

    def handle(self, cfg):
        if not "match" in cfg:
            return True

        for regex, match in cfg["match"].items():
            if self.write_match(regex, match) == False:
                return False

        return True


class NginxStringGenerator:
    def __init__(self, parent, name, variable):
        self.p = parent
        self.name = name
        self.variable = variable

    def handle(self, cfg):
        if not self.name in cfg:
            return True

        val = expand_variables(cfg[self.name], self.p.app_name)
        if len(val) == 0:
            return True

        self.p.write(self.variable + " {0};", val)
        return True

class NginxErrorPagesGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "error_pages"

    def handle(self, cfg):
        if not "error_pages" in cfg:
            return True

        for code, path in cfg["error_pages"].items():
            self.p.write("error_page {0} {1};", code, path)

        return True

class NginxLocationsGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "locations"

    def write_location(self, location, cfg):
        # Redirect the "/location" to "/location/" if needed.
        if location[-1] != "/":
            self.p.write("location = {0} {{", location)
            self.p.nested_sections.insert(0, "location")
            self.p.write("rewrite ^(.*[^/])$ $1/ permanent;")
            self.p.nested_sections.pop(0)
            self.p.write("}}")
            self.p.write("")
            location += "/"

        # Do the location section and run the handlers.
        self.p.write("location {0} {{", location)
        self.p.nested_sections.insert(0, "location")
        if "alias" in cfg:
            if cfg["alias"][-1] != "/":
                cfg["alias"] += "/"
            self.p.write("alias {0};", cfg["alias"])
        self.p.run_section_handlers(cfg)
        self.p.run_directive_handlers(cfg)
        self.p.nested_sections.pop(0)
        
        self.p.write("}}")
        self.p.write("")

    # The nginx does not support changing the real directories, so we are
    # trying to match directories with locations here. This method returns
    # {"/var/www/real/fs/directory": "/blog/my/location", ...}.
    def dir2loc(self, locations):
        loc2dir = {}

        for location, loc_cfg in locations.items():
            if "alias" in loc_cfg:
                loc2dir[location] = loc_cfg["alias"]
            else:
                loc2dir[location] = ""

        # Replace the directory prefix with the location. For example:
        # intput: {"/var/www/wp": "/blog", "/var/www/wp/uploads": ""}
        # output: {"/var/www/wp": "/blog", "/var/www/wp/uploads": "/blog/uploads"}
        for d1, l1 in loc2dir.items():
            for d2, l2 in loc2dir.items():
                if d1.startswith(d2):
                    loc2dir[d1] = d1.replace(d2, l2)

        return loc2dir

    def handle(self, _cfg):
        if not "locations" in _cfg:
            return True

        loc2dir = self.dir2loc(_cfg["locations"])

        for location, cfg in _cfg["locations"].items():
            location = expand_variables(location, self.p.app_name)
            if len(location) == 0:
                continue

            if not "alias" in cfg and location in loc2dir and loc2dir[location] != "":
                cfg["alias"] = loc2dir[location]

            self.write_location(location, cfg)

        return True

class NginxGenerator:
    def __init__(self, out):
        self.out = out
        self.app_name = ""
        self.vhost_name = ""
        self.nested_sections = ["main"]

        # Directive handlers must not call run_directive_handlers
        # or run_section_handlers.
        self.directive_handlers = []
        self.directive_handlers.append(NginxProxyGenerator(self))
        self.directive_handlers.append(NginxAllowGenerator(self))
        self.directive_handlers.append(NginxRedirectsGenerator(self))
        self.directive_handlers.append(NginxStringGenerator(self, "index", "index"))
        self.directive_handlers.append(NginxStringGenerator(self, "document_root", "root"))
        self.directive_handlers.append(NginxCertificateGenerator(self))
        self.directive_handlers.append(NginxBalancersGenerator(self))
        self.directive_handlers.append(NginxErrorPagesGenerator(self))

        # Section handlers are supposed to do their stuff and call
        # run_directive_handlers or run_section_handlers
        self.section_handlers = []
        self.section_handlers.append(NginxMatchGenerator(self))
        self.section_handlers.append(NginxLocationsGenerator(self))

    # Writes the data to output file, expands the variables, uses the proper
    # indentation.
    def write(self, data, *args):
        if len(data) != 0:
            if len(args) == 1:
                args = (expand_variables(args[0], self.app_name),)
                if len(args[0]) == 0:
                    return;
            line = (len(self.nested_sections) - 1) * 4 * " " + data.format(*args)
            line = expand_variables(line, self.app_name)
            self.out.write(line)
        self.out.write("\n")

    # Runs the handlers from the list "lst" with config "cfg".
    # When enable/disable list is set, only enabled and not disabled handler
    # (based on their names) will be run.
    def run_handlers(self, lst, cfg, enable, disable):
        for handler in lst:
            if len(disable) != 0 and handler.name in disable:
                continue
            if len(enable) != 0 and not handler.name in enable:
                continue
            if not handler.handle(cfg):
                return False
        return True

    def run_directive_handlers(self, cfg, enable = [], disable = []):
        return self.run_handlers(self.directive_handlers, cfg, enable, disable)

    def run_section_handlers(self, cfg, enable = [], disable = []):
        return self.run_handlers(self.section_handlers, cfg, enable, disable)

    def write_app_config(self, app_cfg, enable = [], disable = []):
        self.app_name = app_cfg["__name__"]
        self.run_directive_handlers(app_cfg, enable, disable)
        self.run_section_handlers(app_cfg, enable, disable)

    # Merges balancers from multiple webconf-spec configs into the single one.
    def merge_balancers(self, vhost_cfg):
        # Function used to update the python dicts/sub-dicts
        def update(d, u):
            for k, v in u.iteritems():
                if isinstance(v, collections.Mapping):
                    r = update(d.get(k, {}), v)
                    d[k] = r
                else:
                    d[k] = u[k]
            return d

        balancers = {}  # merged balancers config
        members = {}    # balancer_name:[member1, member2, ...]
        for app_cfg in vhost_cfg:
            if not "balancers" in app_cfg:
                continue

            # Update the balancers config
            balancers = update(balancers, app_cfg["balancers"])

            # Get the list of balancer members and store it into `members`
            for balancer, cfg in app_cfg["balancers"].items():
                if not balancer in members:
                    members[balancer] = []
                members[balancer] += cfg["members"]

        # If this vhost does not have any balancer, so end up here...
        if len(balancers) == 0:
            return

        # Pair up balancers with members
        for balancer in balancers:
            members[balancer].sort()
            balancers[balancer]["members"] = members[balancer]

        # Set the merged balancers config to first app_cfg and remove all
        # partial balancers configs.
        vhost_cfg[0]["balancers"] = balancers
        for app_cfg in vhost_cfg[1:]:
            if "balancers" in app_cfg:
                del app_cfg["balancers"]

    def write_vhost_config(self, vhost, vhost_cfg):
        self.vhost_name = vhost
        self.merge_balancers(vhost_cfg)

        # Check if there is "certificate" set for some app within this
        # vhost. If yes, set enable_ssl to True.
        enable_ssl = False
        for app_cfg in vhost_cfg:
            if "certificate" in app_cfg and len(expand_variables(app_cfg["certificate"], app_cfg["__name__"])) != 0:
                enable_ssl = True

        # Check if we are only redirecting HTTP to HTTPS. If so,
        # set the only_redirect to True and delete the "redirects" section,
        # we are handling the redirections ourselves later in this method.
        only_redirect = False
        for app_cfg in vhost_cfg:
            self.app_name = app_cfg["__name__"]
            # We are not supporting multiple redirects options, but this is
            # OK. If there is redirection for "/", it is invalid to add
            # any extra redirection.
            if "redirects" in app_cfg and app_cfg["redirects"].items()[0][0] == "/" and enable_ssl:
                only_redirect = True
                del app_cfg["redirects"]

        # If we are only redirecting HTTP to HTTPS, define dummy server just
        # for redirection here.
        if enable_ssl and only_redirect:
            self.write("server {{")
            self.nested_sections.insert(0, "virtualhost")
            if len(sys.argv) == 4 and sys.argv[3] == "--debug":
                self.write("listen 9090;")
            else:
                self.write("listen 80;")
            self.write("server_name {0};", vhost)
            if len(sys.argv) == 4 and sys.argv[3] == "--debug":
                self.write("return 301 https://$server_name:9443$request_uri;")
            else:
                self.write("return 301 https://$server_name$request_uri;")
            self.nested_sections.pop(0)
            self.write("}}")

        # "balancers" define "upstream" nginx directive which must be put
        # outside of "server { }" block, so run it before doing that block.
        for app_cfg in vhost_cfg:
            self.write_app_config(app_cfg, enable = ["balancers"])

        self.write("server {{")
        self.nested_sections.insert(0, "virtualhost")

        # If we are only redirecting, we do not want to listen on 80, that's
        # already done by dummy redirection server defined above.
        if not enable_ssl or not only_redirect:
            if len(sys.argv) == 4 and sys.argv[3] == "--debug":
                self.write("listen 9090;")
            else:
                self.write("listen 80;")

        if enable_ssl:
            if len(sys.argv) == 4 and sys.argv[3] == "--debug":
                self.write("listen 9443 ssl;")
            else:
                self.write("listen 443 ssl;")

        self.write("server_name {0};", vhost)
        for app_cfg in vhost_cfg:
            self.write_app_config(app_cfg, disable = ["balancers"])
                    
        self.nested_sections.pop(0)
        self.write("}}")

def generate_config(inp, outp):
    cfgs = {"webapps":{}}

    # Load multiple configs from directory or single JSON file.
    if os.path.isdir(inp):
        for f in os.listdir(inp):
            if f.endswith(".json"):
                f = open(inp + "/" + f, "r")
                c = json.load(f)
                f.close()
                cfgs = load_config(cfgs, c)
    else:
        f = open(inp, "r")
        cfgs = json.load(f)
        f.close()

    # Get webapps wihout and with vhost.
    webapps_per_vhost, webapps_without_vhost = get_webapps_per_vhost(cfgs)

    # Generate the config files for webapps with vhost.
    for vhost, vhost_cfg in webapps_per_vhost.items():
        out = open(os.path.join(outp, vhost + ".conf"), "w")
        generator = NginxGenerator(out)
        generator.write_vhost_config(vhost, vhost_cfg)
        out.close()

    # Generate the config files for webapps without vhost.
    for app_cfg in webapps_without_vhost:
        out = open(os.path.join(outp, app_cfg["__name__"] + ".conf"), "w")
        generator = NginxGenerator(out)
        generator.write_app_config(app_cfg)
        out.close()

    return 0

def main():
    if len(sys.argv) < 3:
        print_help()
        return 1

    return generate_config(sys.argv[1], sys.argv[2])

sys.exit(main())
