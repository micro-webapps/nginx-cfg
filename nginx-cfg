#!/usr/bin/env python
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: Jan Kaluza <jkaluza at redhat dot com>
# Description: Converts webserver configuration from webconf-spec JSON
# format to native nginx configuration format.

from __future__ import print_function
from urlparse import urlparse
import sys
import json
import os
import uuid

def print_help():
    print("Usage:", sys.argv[0], "<config_file_or_directory> <output_directory>")

# Loads the config "c" and store it to internal configs storage "cfgs".
def load_config(cfgs, c):
    # The configs stored in Kubernetes/Openshift API-server can have their IDs.
    # We use the ID here as a name of the web application configured by the
    # config, so later when generating the nginx config, we can name it
    # according to web application configured by the config.
    if "id" in c:
        name = c["id"]
        name = name.replace("-","_")
    else:
        name = str(uuid.uuid1())

    # In case the ID is not unique and the config with this ID has been
    # already loaded, append UUID to it.
    if name in cfgs["webapps"]:
        name += str(uuid.uuid1())

    # For now we support also loading from "webconfig".
    # FIXME: This is not according to webconfig-spec. Micro-webapps confd.py has
    # to be fixed before removing this.
    if "webconfig" in c:
        cfgs["webapps"][name] = c["webconfig"]
    else:
        cfgs["webapps"][name] = c

    return cfgs

# Replaces %X% with value of X environment variable.
# Replaces %THIS_X% with value of app_name_X environment variable.
# FIXME: ^ Is this realy needed or beneficial?
def expand_variables(line, app_name):
    if line.startswith("%") and line.endswith("%"):
        env = line[1:-1]
        if env.startswith("THIS_"):
            env = env.replace("THIS_", app_name.upper() + "_")
        return os.getenv(env, "")

    ret = ""
    lst = line.split("%")
    for part in lst:
        env = part
        if env.startswith("THIS_"):
            env = env.replace("THIS_", app_name.upper() + "_")
        val = os.getenv(env, False)
        if val == False:
            ret += part + "%"
        else:
            ret = ret[:-1]
            ret += val
    return ret[:-1] # remove last %

# Returns two objects from "cfgs":
# - webapps_per_vhost - {vhost1:[app1_cfg, app2_cfg, ...], ...}
# - webapps_without_vhost - [app1_cfg, app2_cfg, ...]
def get_webapps_per_vhost(cfgs):
    webapps_per_vhost = {}
    webapps_without_vhost = []
    for app, app_cfg in cfgs["webapps"].items():
        # We would loss the app name, so store it under __name__ key.
        # FIXME: Maybe in the future we could create App class here.
        app_cfg["__name__"] = app
        if "virtualhost" in app_cfg:
            # virtualhost can contain variable, so at first try to expand it.
            # If it's empty after the expansion, append it to
            # webapp_without_vhost list.
            vhost = expand_variables(app_cfg["virtualhost"], app)
            if len(vhost) == 0:
                webapps_without_vhost.append(app_cfg)
            else:
                if not vhost in webapps_per_vhost:
                    webapps_per_vhost[vhost] = []
                webapps_per_vhost[vhost].append(app_cfg)
        else:
            webapps_without_vhost.append(app_cfg)
    
    return webapps_per_vhost, webapps_without_vhost

class NginxProxyGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "proxy"

    # Returns address of proxy in protocol://address:port format.
    # Returns None if the address cannot be obtained or is not set
    # in the proxy_cfg.
    def get_address(self, proxy_cfg):
        if "proxy_protocol" in proxy_cfg:
            ret = expand_variables(proxy_cfg["proxy_protocol"], self.p.app_name)
            if len(ret) == 0:
                ret = "http://"
        else:
            ret = "http://"

        # For Kubernetes/Openshift, we allow getting the address and port of
        # the backend from the APP_NAME_PORT environment variable.
        address_env = self.p.app_name.upper() + "_PORT"
        address = os.getenv(address_env, False)
        if address:
            url = urlparse(address)
            # If we are running in Kubernetes/Openshift, use the IP address,
            # because it's static per service. Otherwise use the hostname
            # (app_name) and port from _PORT.
            if os.getenv("KUBERNETES_SERVICE_PORT", False) != False:
                ret += url.netloc
            else:
                ret += self.p.app_name + ":" + str(url.port)
        else:
            # The APP_NAME_PORT variable is not set, so fallback to
            # proxy_hostname and proxy_port.
            if "proxy_hostname" in proxy_cfg:
                if proxy_cfg["proxy_hostname"] == "env":
                    print("proxy_hostname is set to 'env', but {0} is not set".format(address_env))
                    return None
                else:
                    ret += proxy_cfg["proxy_hostname"]
            else:
                return None

            if "proxy_port" in proxy_cfg:
                if proxy_cfg["proxy_hostname"] == "env":
                    print("proxy_port is set to 'env', but {0} is not set".format(address_env))
                    return None
                else:
                    ret += ":" + str(proxy_cfg["proxy_port"])
            else:
                return None

        return ret

    def write_proxypass(self, proxy_cfg):
        backend_address = self.get_address(proxy_cfg)
        if not backend_address:
            return

        parsed = urlparse(backend_address)
        backend_url = parsed.scheme + "://" + self.p.vhost_name

        # Get proxy_backend_alias or set it to "/" if not set.
        if "proxy_backend_alias" in proxy_cfg and len(expand_variables(proxy_cfg["proxy_backend_alias"], self.p.app_name)) != 0:
            proxy_backend_alias = expand_variables(proxy_cfg["proxy_backend_alias"], self.p.app_name)
        else:
            proxy_backend_alias = "/"
            
        backend_url += proxy_backend_alias
        backend_address += proxy_backend_alias

        # Get frontend URL or set it to "/" if not set.
        if "proxy_alias" in proxy_cfg:
            frontend_url = expand_variables(proxy_cfg["proxy_alias"], self.p.app_name)
            if len(frontend_url) == 0:
                frontend_url = "/"
        else:
            frontend_url = "/"

        if frontend_url[-1] != "/":
            frontend_url += "/"

        # In case this method is called outside of "location" scope. we
        # have to create the "location" here.
        added_location = False
        if not "location" in self.p.nested_sections:
            self.p.write("location {0} {{", frontend_url)
            added_location = True
            self.p.nested_sections.insert(0, "location")

        if backend_address.startswith("http"):
            self.p.write("proxy_pass {0};", backend_address)
        elif backend_address.startswith("fcgi://"):
            # TODO: Maybe we should check that the php file exists as is
            # done by following commented part of code, but the problem
            # is we would have to replace $document_root with the real
            # location of the php files.
            #self.p.write("fastcgi_split_path_info ^(.+?\.php)(/.*)$;")
            #self.p.write("if (!-f $document_root$fastcgi_script_name) {{")
            #self.p.write("    return 404;")
            #self.p.write("}}")
            # TODO: This should not be hard-coded.
            self.p.write("fastcgi_index index.php;")
            self.p.write("fastcgi_pass {0};", parsed.netloc)
            self.p.write("include fastcgi_params;")

        if added_location:
            self.p.nested_sections.pop(0)
            self.p.write("}}")

    def write_sethandler(self, proxy_cfg):
        address = self.get_address(proxy_cfg)
        if address:
            self.p.write("SetHandler \"proxy:{0}\"", address)

    def handle(self, proxy_cfg):
        if (not "proxy_hostname" in proxy_cfg
            and not "proxy_port" in proxy_cfg
            and not "proxy_protocol" in proxy_cfg
            and not "proxy_alias" in proxy_cfg
            and not "proxy_backend_alias" in proxy_cfg):
            return True

        self.write_proxypass(proxy_cfg)
        return True

class NginxAllowGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "allow"

    def handle(self, cfg):
        if not "allow" in cfg:
            return True

        allow = cfg["allow"]
        if allow == "all":
            self.p.write("allow all;")
        elif allow == "local":
            self.p.write("allow 127.0.0.1;")
            self.p.write("allow ::1;")
        else:
            self.p.write("deny all;")
        return True

class NginxRedirectsGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "redirects"

    def handle(self, cfg):
        if not "redirects" in cfg:
            return True

        for frm, redirect in cfg["redirects"].items():
            # When the "from" part of redirection does not contain
            # the trailing slash, redirect from "/location" to "/location/" and
            # add the trailing slash to redired from "/location/" to real
            # "to" URL later.
            if frm[-1] != "/":
                self.p.write("location = {0} {{", frm)
                self.p.nested_sections.insert(0, "location")
                self.p.write("rewrite ^(.*[^/])$ $1/ permanent;")
                self.p.nested_sections.pop(0)
                self.p.write("}}")
                self.p.write("")
                frm += "/"

            self.p.write("location {0} {{", frm)
            self.p.nested_sections.insert(0, "location")
            self.p.write("return 301 {0};", redirect["to"])
            self.p.nested_sections.pop(0)
            self.p.write("}}")
        return True

class NginxCertificateGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "certificate"

    def handle(self, cfg):
        if not "certificate" in cfg:
            return True
        
        self.p.write("ssl_certificate {0};", cfg["certificate"])
        if "certificate_key" in cfg:
            self.p.write("ssl_certificate_key {0};", cfg["certificate_key"])
        
        return True

class NginxMatchGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "match"

    def write_match(self, regex, cfg):
        # Match directive is basically regexp location ...
        self.p.write("location ~ {0} {{", regex)
        self.p.nested_sections.insert(0, "location")
        ret = self.p.run_directive_handlers(cfg)
        self.p.nested_sections.pop(0)
        self.p.write("}}")

        return ret

    def handle(self, cfg):
        if not "match" in cfg:
            return True

        for regex, match in cfg["match"].items():
            if self.write_match(regex, match) == False:
                return False

        return True


class NginxStringGenerator:
    def __init__(self, parent, name, variable):
        self.p = parent
        self.name = name
        self.variable = variable

    def handle(self, cfg):
        if not self.name in cfg:
            return True

        val = expand_variables(cfg[self.name], self.p.app_name)
        if len(val) == 0:
            return True

        self.p.write(self.variable + " {0};", val)
        return True

class NginxLocationsGenerator:
    def __init__(self, parent):
        self.p = parent
        self.name = "locations"

    def write_location(self, location, cfg):
        # Redirect the "/location" to "/location/" if needed.
        if location[-1] != "/":
            self.p.write("location = {0} {{", location)
            self.p.nested_sections.insert(0, "location")
            self.p.write("rewrite ^(.*[^/])$ $1/ permanent;")
            self.p.nested_sections.pop(0)
            self.p.write("}}")
            self.p.write("")
            location += "/"

        if cfg["alias"][-1] != "/":
            cfg["alias"] += "/"

        # Do the location section and run the handlers.
        self.p.write("location {0} {{", location)
        self.p.nested_sections.insert(0, "location")
        if "alias" in cfg:
            self.p.write("alias {0};", cfg["alias"])
        self.p.run_section_handlers(cfg)
        self.p.run_directive_handlers(cfg)
        self.p.nested_sections.pop(0)
        
        self.p.write("}}")
        self.p.write("")

    def handle(self, _cfg):
        if not "locations" in _cfg:
            return True

        for location, cfg in _cfg["locations"].items():
            location = expand_variables(location, self.p.app_name)
            if len(location) == 0:
                continue

            self.write_location(location, cfg)

        return True

class NginxGenerator:
    def __init__(self, out):
        self.out = out
        self.app_name = ""
        self.vhost_name = ""
        self.nested_sections = ["main"]

        # Directive handlers must not call run_directive_handlers
        # or run_section_handlers.
        self.directive_handlers = []
        self.directive_handlers.append(NginxProxyGenerator(self))
        self.directive_handlers.append(NginxAllowGenerator(self))
        self.directive_handlers.append(NginxRedirectsGenerator(self))
        self.directive_handlers.append(NginxStringGenerator(self, "index", "index"))
        self.directive_handlers.append(NginxStringGenerator(self, "document_root", "root"))
        self.directive_handlers.append(NginxCertificateGenerator(self))

        # Section handlers are supposed to do their stuff and call
        # run_directive_handlers or run_section_handlers
        self.section_handlers = []
        self.section_handlers.append(NginxMatchGenerator(self))
        self.section_handlers.append(NginxLocationsGenerator(self))

    # Writes the data to output file, expands the variables, uses the proper
    # indentation.
    def write(self, data, *args):
        if len(data) != 0:
            if len(args) == 1:
                args = (expand_variables(args[0], self.app_name),)
                if len(args[0]) == 0:
                    return;
            line = (len(self.nested_sections) - 1) * 4 * " " + data.format(*args)
            line = expand_variables(line, self.app_name)
            self.out.write(line)
        self.out.write("\n")

    # Runs the handlers from the list "lst" with config "cfg".
    # When enable/disable list is set, only enabled and not disabled handler
    # (based on their names) will be run.
    def run_handlers(self, lst, cfg, enable, disable):
        for handler in lst:
            if len(disable) != 0 and handler.name in disable:
                continue
            if len(enable) != 0 and not handler.name in enable:
                continue
            if not handler.handle(cfg):
                return False
        return True

    def run_directive_handlers(self, cfg, enable = [], disable = []):
        return self.run_handlers(self.directive_handlers, cfg, enable, disable)

    def run_section_handlers(self, cfg, enable = [], disable = []):
        return self.run_handlers(self.section_handlers, cfg, enable, disable)

    def write_app_config(self, app_cfg, enable = [], disable = []):
        self.app_name = app_cfg["__name__"]
        self.run_directive_handlers(app_cfg, enable, disable)
        self.run_section_handlers(app_cfg, enable, disable)

    # The nginx does not support changing the real directories, so we are
    # trying to match directories with locations here. This method returns
    # {"/var/www/real/fs/directory": "/blog/my/location", ...}.
    def dir2loc(self, vhost_cfg):
        dir2loc = {}

        # At first, get aliases out of the directories section.
        # For the directories with the "alias", we can create {dir:alias}
        # right now.
        for app_cfg in vhost_cfg:
            if "directories" in app_cfg:
                for directory, dir_cfg in app_cfg["directories"].items():
                    if "alias" in dir_cfg:
                        dir2loc[directory] = dir_cfg["alias"]
                    else:
                        dir2loc[directory] = ""

        # Replace the directory prefix with the location. For example:
        # intput: {"/var/www/wp": "/blog", "/var/www/wp/uploads": ""}
        # output: {"/var/www/wp": "/blog", "/var/www/wp/uploads": "/blog/uploads"}
        for d1, l1 in dir2loc.items():
            for d2, l2 in dir2loc.items():
                if d1.startswith(d2):
                    dir2loc[d1] = d1.replace(d2, l2)

        return dir2loc

    # The nginx does not support changing the real directories, so we are
    # trying to convert directories to locations here.
    def convert_dir_to_loc(self, vhost_cfg):
        # Get the directory to location matching.
        dir2loc = self.dir2loc(vhost_cfg)

        for app_cfg in vhost_cfg:
            # If there are no "directories", then there's nothign to convert.
            if not "directories" in app_cfg:
                continue

            # We have some directories, so prepare also locations to store them.
            if not "locations" in app_cfg:
                app_cfg["locations"] = {}

            for directory, cfg in app_cfg["directories"].items():
                directory = expand_variables(directory, app_cfg["__name__"])
                if len(directory) == 0:
                    continue

                # Get the alias (location) of the directory.
                if "alias" in cfg:
                    alias = cfg["alias"]
                elif directory in dir2loc:
                    alias = dir2loc[directory]
                else:
                    continue

                # Store the configuration of current directory into
                # locations section of config.
                if not alias in app_cfg["locations"]:
                    app_cfg["locations"][alias] = cfg
                    app_cfg["locations"][alias]["alias"] = directory
                else:
                    app_cfg["locations"][alias].update(cfg)
                    app_cfg["locations"][alias]["alias"] = directory

        return vhost_cfg

    def write_vhost_config(self, vhost, vhost_cfg):
        self.vhost_name = vhost
        vhost_cfg = self.convert_dir_to_loc(vhost_cfg)

        # Check if there is "certificate" set for some app within this
        # vhost. If yes, set enable_ssl to True.
        enable_ssl = False
        for app_cfg in vhost_cfg:
            if "certificate" in app_cfg and len(expand_variables(app_cfg["certificate"], app_cfg["__name__"])) != 0:
                enable_ssl = True

        # Check if we are only redirecting HTTP to HTTPS. If so,
        # set the only_redirect to True and delete the "redirects" section,
        # we are handling the redirections ourselves later in this method.
        only_redirect = False
        for app_cfg in vhost_cfg:
            self.app_name = app_cfg["__name__"]
            # We are not supporting multiple redirects options, but this is
            # OK. If there is redirection for "/", it is invalid to add
            # any extra redirection.
            if "redirects" in app_cfg and app_cfg["redirects"].items()[0][0] == "/" and enable_ssl:
                only_redirect = True
                del app_cfg["redirects"]

        # If we are only redirecting HTTP to HTTPS, define dummy server just
        # for redirection here.
        if enable_ssl and only_redirect:
            self.write("server {{")
            self.nested_sections.insert(0, "virtualhost")
            if len(sys.argv) == 4 and sys.argv[3] == "--debug":
                self.write("listen 9090;")
            else:
                self.write("listen 80;")
            self.write("server_name {0};", vhost)
            if len(sys.argv) == 4 and sys.argv[3] == "--debug":
                self.write("return 301 https://$server_name:9443$request_uri;")
            else:
                self.write("return 301 https://$server_name$request_uri;")
            self.nested_sections.pop(0)
            self.write("}}")

        self.write("server {{")
        self.nested_sections.insert(0, "virtualhost")

        # If we are only redirecting, we do not want to listen on 80, that's
        # already done by dummy redirection server defined above.
        if not enable_ssl or not only_redirect:
            if len(sys.argv) == 4 and sys.argv[3] == "--debug":
                self.write("listen 9090;")
            else:
                self.write("listen 80;")

        if enable_ssl:
            if len(sys.argv) == 4 and sys.argv[3] == "--debug":
                self.write("listen 9443 ssl;")
            else:
                self.write("listen 443 ssl;")

        self.write("server_name {0};", vhost)
        for app_cfg in vhost_cfg:
            self.write_app_config(app_cfg)
                    
        self.nested_sections.pop(0)
        self.write("}}")

def generate_config(inp, outp):
    cfgs = {"webapps":{}}

    # Load multiple configs from directory or single JSON file.
    if os.path.isdir(inp):
        for f in os.listdir(inp):
            if f.endswith(".json"):
                f = open(inp + "/" + f, "r")
                c = json.load(f)
                f.close()
                cfgs = load_config(cfgs, c)
    else:
        f = open(inp, "r")
        cfgs = json.load(f)
        f.close()

    # Get webapps wihout and with vhost.
    webapps_per_vhost, webapps_without_vhost = get_webapps_per_vhost(cfgs)

    # Generate the config files for webapps with vhost.
    for vhost, vhost_cfg in webapps_per_vhost.items():
        out = open(os.path.join(outp, vhost + ".conf"), "w")
        generator = NginxGenerator(out)
        generator.write_vhost_config(vhost, vhost_cfg)
        out.close()

    webapps_without_vhost = NginxGenerator(None).convert_dir_to_loc(webapps_without_vhost)

    # Generate the config files for webapps without vhost.
    for app_cfg in webapps_without_vhost:
        out = open(os.path.join(outp, app_cfg["__name__"] + ".conf"), "w")
        generator = NginxGenerator(out)
        generator.write_app_config(app_cfg)
        out.close()

    return 0

def main():
    if len(sys.argv) < 3:
        print_help()
        return 1

    return generate_config(sys.argv[1], sys.argv[2])

sys.exit(main())
